'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const colorCodes = {
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    bgBrightBlack: [100, 49],
    bgBrightRed: [101, 49],
    bgBrightGreen: [102, 49],
    bgBrightYellow: [103, 49],
    bgBrightBlue: [104, 49],
    bgBrightMagenta: [105, 49],
    bgBrightCyan: [106, 49],
    bgBrightWhite: [107, 49],
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    brightBlack: [90, 39],
    brightRred: [91, 39],
    brightGreen: [92, 39],
    brightYellow: [93, 39],
    brightBlue: [94, 39],
    brightMagenta: [95, 39],
    brightCyan: [96, 39],
    brightWhite: [97, 39],
};

const formatCodes = {
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    blink: [5, 25],
    inverse: [7, 27],
    hidden: [8, 28],
    strike: [9, 29],
};

const parseFormat = (code, message) => {
    if (!code) {
        code = [0, 0];
    }
    return `\x1b[${code[0]}m${message || ''}\x1b[${code[1]}m`;
};

var _a;
class ColorService {
    static _parse(code, message) {
        this._styles.push(code);
        if (message) {
            let result = message;
            this._styles.forEach((format) => {
                result = parseFormat(code, result);
            });
            this._styles.splice(0, this._styles.length);
            return result;
        }
        return this;
    }
}
_a = ColorService;
ColorService._styles = [];
ColorService.bgBlack = (text) => _a._parse(colorCodes.bgBlack, text);
ColorService.bgBrightBlack = (text) => _a._parse(colorCodes.bgBrightBlack, text);
ColorService.bgBlue = (text) => _a._parse(colorCodes.bgBlue, text);
ColorService.bgBrightBlue = (text) => _a._parse(colorCodes.bgBrightBlue, text);
ColorService.bgCyan = (text) => _a._parse(colorCodes.bgCyan, text);
ColorService.bgBrightCyan = (text) => _a._parse(colorCodes.bgBrightCyan, text);
ColorService.bgGreen = (text) => _a._parse(colorCodes.bgGreen, text);
ColorService.bgBrightGreen = (text) => _a._parse(colorCodes.bgBrightGreen, text);
ColorService.bgMagenta = (text) => _a._parse(colorCodes.bgMagenta, text);
ColorService.bgBrightMagenta = (text) => _a._parse(colorCodes.bgBrightMagenta, text);
ColorService.bgRed = (text) => _a._parse(colorCodes.bgRed, text);
ColorService.bgBrightRed = (text) => _a._parse(colorCodes.bgBrightRed, text);
ColorService.bgYellow = (text) => _a._parse(colorCodes.bgYellow, text);
ColorService.bgBrightYellow = (text) => _a._parse(colorCodes.bgBrightYellow, text);
ColorService.bgWhite = (text) => _a._parse(colorCodes.bgWhite, text);
ColorService.bgBrightWhite = (text) => _a._parse(colorCodes.bgBrightWhite, text);
ColorService.black = (text) => _a._parse(colorCodes.black, text);
ColorService.brightBlack = (text) => _a._parse(colorCodes.brightBlack, text);
ColorService.blue = (text) => _a._parse(colorCodes.blue, text);
ColorService.brightBlue = (text) => _a._parse(colorCodes.brightBlue, text);
ColorService.cyan = (text) => _a._parse(colorCodes.cyan, text);
ColorService.brightCyan = (text) => _a._parse(colorCodes.brightCyan, text);
ColorService.green = (text) => _a._parse(colorCodes.green, text);
ColorService.brightGreen = (text) => _a._parse(colorCodes.brightGreen, text);
ColorService.magenta = (text) => _a._parse(colorCodes.magenta, text);
ColorService.brightMagenta = (text) => _a._parse(colorCodes.brightMagenta, text);
ColorService.red = (text) => _a._parse(colorCodes.red, text);
ColorService.brightRed = (text) => _a._parse(colorCodes.brightRred, text);
ColorService.white = (text) => _a._parse(colorCodes.white, text);
ColorService.brightWhite = (text) => _a._parse(colorCodes.brightWhite, text);
ColorService.yellow = (text) => _a._parse(colorCodes.yellow, text);
ColorService.brightYellow = (text) => _a._parse(colorCodes.brightYellow, text);
ColorService.bold = (text) => _a._parse(formatCodes.bold, text);
ColorService.dim = (text) => _a._parse(formatCodes.dim, text);
ColorService.hidden = (text) => _a._parse(formatCodes.hidden, text);
ColorService.inverse = (text) => _a._parse(formatCodes.inverse, text);
ColorService.italic = (text) => _a._parse(formatCodes.italic, text);
ColorService.strikeThrough = (text) => _a._parse(formatCodes.strike, text);
ColorService.underline = (text) => _a._parse(formatCodes.underline, text);
ColorService.blink = (text) => _a._parse(formatCodes.blink, text);
ColorService.reset = () => parseFormat([0, 0]);

exports.Color = ColorService;
//# sourceMappingURL=index.js.map
